terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = var.aws_profile
  region  = var.aws_region
}

# ---------- VPC ----------
resource "aws_vpc" "k8s_vpc" {
  cidr_block           = var.aws_vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Owner   = "${var.owner}"
    Name    = "k8s_vpc"
    Service = "k8s_example"
  }
}

# ---------- IGW ----------
resource "aws_internet_gateway" "k8s_igw" {
  vpc_id = aws_vpc.k8s_vpc.id

  tags = {
    Owner   = "${var.owner}"
    Name    = "k8s_igw"
    Service = "k8s_example"
  }
}

# ---------- RT ----------
resource "aws_route_table" "k8s_public_rt" {
  vpc_id = aws_vpc.k8s_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.k8s_igw.id
  }

  tags = {
    Owner   = "${var.owner}"
    Name    = "k8s_public_rt"
    Service = "k8s_example"
  }
}

# resource "aws_default_route_table" "k8s_private_rt" {
#   default_route_table_id = aws_vpc.k8s_vpc.default_route_table_id

#   tags = {
#     Owner = "${var.owner}"
#     Name = "k8s_private_rt"
#     Service = "k8s_example"
#   }
# }

# ---------- Subnets ----------
data "aws_availability_zones" "available" {
  state = "available"
}

resource "aws_subnet" "k8s_public_subnet_1" {
  vpc_id                  = aws_vpc.k8s_vpc.id
  cidr_block              = var.aws_vpc_subnet_cidrs["public_1"]
  map_public_ip_on_launch = true
  availability_zone       = data.aws_availability_zones.available.names[0]

  tags = {
    Owner   = "${var.owner}"
    Name    = "k8s_public_subnet_1"
    Service = "k8s_example"
  }
}

resource "aws_subnet" "k8s_public_subnet_2" {
  vpc_id                  = aws_vpc.k8s_vpc.id
  cidr_block              = var.aws_vpc_subnet_cidrs["public_2"]
  map_public_ip_on_launch = true
  availability_zone       = data.aws_availability_zones.available.names[1]

  tags = {
    Owner   = "${var.owner}"
    Name    = "k8s_public_subnet_2"
    Service = "k8s_example"
  }
}

# resource "aws_subnet" "k8s_private_subnet_1" {
#   vpc_id                  = aws_vpc.k8s_vpc.id
#   cidr_block              = var.aws_vpc_subnet_cidrs["private_1"]
#   map_public_ip_on_launch = false
#   availability_zone       = data.aws_availability_zones.available.names[0]

#   tags = {
#     Owner = "${var.owner}"
#     Name = "k8s_private_subnet_1"
#     Service = "k8s_example"
#   }
# }

# resource "aws_subnet" "k8s_private_subnet_2" {
#   vpc_id                  = aws_vpc.k8s_vpc.id
#   cidr_block              = var.aws_vpc_subnet_cidrs["private_2"]
#   map_public_ip_on_launch = false
#   availability_zone       = data.aws_availability_zones.available.names[1]

#   tags = {
#     Owner = "${var.owner}"
#     Name = "k8s_private_subnet_2"
#     Service = "k8s_example"
#   }
# }

resource "aws_route_table_association" "k8s_public1_association" {
  subnet_id      = aws_subnet.k8s_public_subnet_1.id
  route_table_id = aws_route_table.k8s_public_rt.id
}

resource "aws_route_table_association" "k8s_public2_association" {
  subnet_id      = aws_subnet.k8s_public_subnet_2.id
  route_table_id = aws_route_table.k8s_public_rt.id
}

# resource "aws_route_table_association" "k8s_private1_association" {
#   subnet_id      = aws_subnet.k8s_private_subnet_1.id
#   route_table_id = aws_default_route_table.k8s_private_rt.id
# }

# resource "aws_route_table_association" "k8s_private2_association" {
#   subnet_id      = aws_subnet.k8s_private_subnet_2.id
#   route_table_id = aws_default_route_table.k8s_private_rt.id
# }

# ---------- Security Group ----------
resource "aws_security_group" "k8s_kubeadm_sg" {
  name        = "k8s_kubeadm_sg"
  description = "Security Group for the Kube Admin"
  vpc_id      = aws_vpc.k8s_vpc.id

  #---- Kube Logs ----
  ingress {
    from_port   = 10250
    to_port     = 10250
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #---- Kube Connect Allow ----
  ingress {
    from_port   = 6443
    to_port     = 6443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #---- Octant Access ----
  ingress {
    from_port   = 8900
    to_port     = 8900
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #---- Ingress nodePort for http ----
  ingress {
    from_port   = 30001
    to_port     = 30001
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #---- SSH ----
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #---- HTTP Allow ----
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = -1
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ---------- Key Pair ----------
resource "aws_key_pair" "aws_key" {
  key_name   = var.ssh_key_name
  public_key = file("${var.ssh_public_key_path}")
}

# ---------- Kube Master ----------
resource "aws_instance" "master" {
  count         = 1
  ami           = var.instance_ami
  instance_type = var.instance_type
  key_name      = var.ssh_key_name

  associate_public_ip_address = true # Instances have public, dynamic IP

  vpc_security_group_ids = ["${aws_security_group.k8s_kubeadm_sg.id}"]
  subnet_id              = aws_subnet.k8s_public_subnet_1.id

  tags = {
    Owner                               = "${var.owner}"
    Name                                = "master-${count.index}"
    Service                             = "k8s_example"
    "kubernetes.io/cluster/k8s-cluster" = "k8s-cluster"
  }
  # tags = {
  #   Owner           = "${var.owner}"
  #   Name            = "master-${count.index}"
  #   ansibleFilter   = "${var.ansibleFilter}"
  #   ansibleNodeType = "master"
  #   ansibleNodeName = "master-${count.index}"
  # }
}

# ---------- Kube Workers ----------
resource "aws_instance" "worker" {
  count         = 1
  ami           = var.instance_ami
  instance_type = var.instance_type
  key_name      = var.ssh_key_name

  associate_public_ip_address = true # Instances have public, dynamic IP

  vpc_security_group_ids = ["${aws_security_group.k8s_kubeadm_sg.id}"]
  subnet_id              = aws_subnet.k8s_public_subnet_1.id

  tags = {
    Owner                               = "${var.owner}"
    Name                                = "worker-${count.index}"
    Service                             = "k8s_example"
    "kubernetes.io/cluster/k8s-cluster" = "k8s-cluster"
  }
  # tags = {
  #   Owner           = "${var.owner}"
  #   Name            = "worker-${count.index}"
  #   ansibleFilter   = "${var.ansibleFilter}"
  #   ansibleNodeType = "worker"
  #   ansibleNodeName = "worker-${count.index}"
  # }
}

# ---------- Outputs ----------
output "kubernetes_master_public_ip" {
  value = join(",", aws_instance.master.*.public_ip)
}
output "kubernetes_workers_public_ip" {
  value = join(",", aws_instance.worker.*.public_ip)
}

# ---------- Provision Ansible Inventory ---------- 
resource "null_resource" "tc_instances" {
  provisioner "local-exec" {
    command = <<EOD
    cat <<EOF > kube_hosts
[kubemaster]
master ansible_host="${aws_instance.master.0.public_ip}" ansible_user=ubuntu
[kubeworkers]
worker1 ansible_host="${aws_instance.worker.0.public_ip}" ansible_user=ubuntu
EOF
EOD
  }
}
